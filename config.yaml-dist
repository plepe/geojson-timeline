defaultState:
# Default Map Location.
  zoom: 15
  lat: 46.2
  lon: 16.4

dateFormat: lll

overlays:
  - id: borders
    type: leaflet-geowiki
    enabled: true
    data: borders.osm.json
    styleFile: borders.yaml
    filter: |
      {% if state.date %}
      relation[start_date~"{{ state.date|osmDateQuery({ op: '<=', strict: true }) }}"][end_date!~"{{ state.date|osmDateQuery({ op: '<=', strict: true }) }}"]

layer:
- type: TimelineJSON
  source:
    # url: '{{ id }}.json'
    url: all.json
    reqParameter: ['id']

    # from all.json, load only the items where the filter evaluates to a true
    # value
    filter: |
      {{ state.id ? item.id == state.id : true }}
    # if filter is used, use 'filterId' to detect, when the layer has to be
    # redrawn (if the filterId changes)
    filterId: |
      {{ state.id }}

  feature:
    # which field in each log entry to use as startdate (default: 'start')
    #startLogField: start

    # use a Twig template to evaluate the value of the the start of a log entry.
    # Use {{ item.key }} and {{ logEntry.key }}.
    #startLog: '{{ logEntry.start }}'

    # See startLogField and startLog for documentation
    #endLogField: end
    #endLog: '{{ logEntry.ende }}'

- type: TimelineGeoJSON
  source:
    title: Countries
    attribution: Natural Earth
    url: https://datahub.io/core/geo-countries/r/countries.geojson
    reqParameter: []
    # the url may use twig parameters from the state (e.g. 'id')
    # then you should add 'id' to reqParameter, so that the app detects
    # when the source changes; also these parameters will be added to the link
  
  feature:
    type: start-end-field
    startField: |-
      {{ item.properties.start }}
    endField: |-
      {{ item.properties.end }}
    popupTemplate: |-
      {{ item.properties.popup }}
    nodeFeature: marker
    popupTemplate: |-
      {{ item.properties.ADMIN }}
    styleTemplate: |-
      {{ { color: 'red' }|json_encode }}
