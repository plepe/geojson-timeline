app:
  name: timeline-map
  url: https://github.com/plepe/timeline-map

defaultState:
# Default Map Location.

map:
  defaultView:
    minlat: 48.2
    maxlat: 48.4
    minlon: 16.2
    maxlon: 16.6

# remember these additional parameters in the url
addParam:
- id

dateFormat: lll

sidebar:
  # For all twig Templates the following values are available: state.*

  # Whether the sidebar should be shown or not (boolean / twig template)
  show: false

  template: 'SIDEBAR {{ state.id }}'

overlays:
  - id: borders
    type: leaflet-geowiki
    enabled: true
    data: borders.osm.json
    styleFile: borders.yaml
    filter: |
      {% if state.date %}
      relation[start_date~"{{ state.date|osmDateQuery({ op: '<=', strict: true }) }}"][end_date!~"{{ state.date|osmDateQuery({ op: '<=', strict: true }) }}"]

timeline:
  defaultMin: 1900
  defaultMax: 2030

  # which urlPrecision to use, either 'date' or 'datetime' (default)
  urlPrecision: 'datetime'

  # apply additional configuration options for the timeline, see
  # https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options
  options:
    zoomMin: 864000000

layers:
- type: TimelineJSON
  source:
    # url: '{{ state.id }}.json'
    url: all.json

    # from all.json, load only the items where the filter evaluates to a true
    # value
    filter: |
      {{ state.id ? item.id == state.id : true }}
    # if filter is used, use 'filterId' to detect, when the layer has to be
    # redrawn (if the filterId changes)
    filterId: |
      {{ state.id }}

  feature:
    # name of the field containing the geometry (if there's one per item)
    geomField: 'geom'

    # alternatively, name of the field in each log entry (if the geometry
    # of the item changes)
    #geomLogField: 'geom'

    # Type of geometry, currently supported: 'wkt', 'ewkt', 'wkb', 'ewkb',
    # 'twkb', 'geojson'
    geomType: 'wkt'

    # init template - this is twig template which will be evaluated for all
    # items before other templates are evaluated. You may set variables for
    # this item with {% set var = "any value" %}. You can set global variables
    # with {{ setFlag("var", "any value") }}, which can be recalled from other
    # items with {{ getFlag("var") }}.
    #init: |

    # which field in each log entry to use as startdate (default: 'start')
    #startLogField: start

    # use a Twig template to evaluate the value of the the start of a log entry.
    # Use {{ item.key }} and {{ logEntry.key }}.
    #startLog: '{{ logEntry.start }}'

    # See startLogField and startLog for documentation
    #endLogField: end
    #endLog: '{{ logEntry.ende }}'

    # whether this item should be considered for timeline-timespan
    considerTimelineTimespan: |
      {{ state.id != null and state.id != '' ? item.id == state.id : true }}
    # value of start/end field
    startField: |-
      {{ item.start }}
    endField: |-
      {{ item.end }}

    # Whether this feature should be considered by the initialMapView (default:
    # true)
    initialMapView: |
      {{ state.id != null and state.id != '' ? item.id == state.id : true }}

    popupTemplate: |-
      {{ item.title }}

    # an alternative to popupTemplate: load popup content from an address
    # if both popupTemplate and popupSource are defined, then first the
    # evaluated popupTemplate will be shown, then overwriten by the result of
    # popupSource
    popupSource:
      url: '/popup-{{ item.id }}.html'

      # if the address returns wrapping HTML, just use the queried part
      querySelector: '.content'

      # You may apply modifiers. Each modifier has a querySelector or
      # querySelectorAll. To the first result (or all results using
      # querySelectorAll), the content will be applied (content is a Twig
      # template; you may use item.*, state.* and (if a time has been selected)
      # logEntry.*.
      # Available actions: 'append', 'prepend', 'replace' (default).
      modifier:
      - query: .header
        action: append
        content: |-
          <a href="#id={{ item.id }}">{{ item.id }}</a>

    # If a popup is open, every time the state changes, the following modifiers
    # are applied:
    popupModifyApply:
    - query: .date
      action: replace
      content: |-
        {{ state.date }}

    # how to show item in the timeline. Each of the options may be a twig
    # template, available values: item, state. start and end may be overridden,
    # if not startField and endField are used.
    timeline:
      show: true
      type: 'box'
      content: |-
        {{ item.title }}

- type: TimelineGeoJSON
  source:
    title: Countries
    attribution: Natural Earth
    url: https://datahub.io/core/geo-countries/r/countries.geojson
    reqParameter: []
    # the url may use twig parameters from the state (e.g. 'id')
    # then you should add 'id' to reqParameter, so that the app detects
    # when the source changes; also these parameters will be added to the link
  
  feature:
    type: start-end-field
    startField: |-
      {{ item.properties.start }}
    endField: |-
      {{ item.properties.end }}
    popupTemplate: |-
      {{ item.properties.popup }}
    nodeFeature: marker
    popupTemplate: |-
      {{ item.properties.ADMIN }}
    styleTemplate: |-
      {{ { color: 'red' }|json_encode }}
